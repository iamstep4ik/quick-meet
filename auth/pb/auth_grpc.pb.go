// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: pb/auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RegisterUser_Register_FullMethodName = "/pb.RegisterUser/Register"
)

// RegisterUserClient is the client API for RegisterUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterUserClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type registerUserClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterUserClient(cc grpc.ClientConnInterface) RegisterUserClient {
	return &registerUserClient{cc}
}

func (c *registerUserClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, RegisterUser_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterUserServer is the server API for RegisterUser service.
// All implementations must embed UnimplementedRegisterUserServer
// for forward compatibility
type RegisterUserServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedRegisterUserServer()
}

// UnimplementedRegisterUserServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterUserServer struct {
}

func (UnimplementedRegisterUserServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegisterUserServer) mustEmbedUnimplementedRegisterUserServer() {}

// UnsafeRegisterUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterUserServer will
// result in compilation errors.
type UnsafeRegisterUserServer interface {
	mustEmbedUnimplementedRegisterUserServer()
}

func RegisterRegisterUserServer(s grpc.ServiceRegistrar, srv RegisterUserServer) {
	s.RegisterService(&RegisterUser_ServiceDesc, srv)
}

func _RegisterUser_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterUserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterUser_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterUserServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterUser_ServiceDesc is the grpc.ServiceDesc for RegisterUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RegisterUser",
	HandlerType: (*RegisterUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RegisterUser_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/auth.proto",
}

const (
	LoginUser_Login_FullMethodName = "/pb.LoginUser/Login"
)

// LoginUserClient is the client API for LoginUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginUserClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type loginUserClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginUserClient(cc grpc.ClientConnInterface) LoginUserClient {
	return &loginUserClient{cc}
}

func (c *loginUserClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, LoginUser_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginUserServer is the server API for LoginUser service.
// All implementations must embed UnimplementedLoginUserServer
// for forward compatibility
type LoginUserServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedLoginUserServer()
}

// UnimplementedLoginUserServer must be embedded to have forward compatible implementations.
type UnimplementedLoginUserServer struct {
}

func (UnimplementedLoginUserServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLoginUserServer) mustEmbedUnimplementedLoginUserServer() {}

// UnsafeLoginUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginUserServer will
// result in compilation errors.
type UnsafeLoginUserServer interface {
	mustEmbedUnimplementedLoginUserServer()
}

func RegisterLoginUserServer(s grpc.ServiceRegistrar, srv LoginUserServer) {
	s.RegisterService(&LoginUser_ServiceDesc, srv)
}

func _LoginUser_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginUserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginUser_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginUserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginUser_ServiceDesc is the grpc.ServiceDesc for LoginUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LoginUser",
	HandlerType: (*LoginUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LoginUser_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/auth.proto",
}
